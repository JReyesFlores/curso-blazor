@using Entidades
@using Business


<div class="form-group">
    <select class="form-control" @onchange="OnChangedWarehouse">
        <option value="">Seleccione una bodega...</option>
        @foreach (var bodega in wherehouse)
        {
            <option value="@bodega.WherehouseId">@bodega.WherehouseName</option>
        }
    </select>
</div>
<hr />
<EditForm Model="inOut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="inOut.StorageId">
            <option>Seleccione un producto</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Cantidad:</label>
        <InputNumber class="form-control" @bind-Value="inOut.Quantity"></InputNumber>
    </div>

    <div class="form-group">
        <label>¿Es una entrada?</label>
        <InputCheckbox class="form-control" @bind-Value="inOut.IsInput"></InputCheckbox>
    </div>

    <input type="button" value="@buttonValue" @onclick="SaveInOut" class="btn btn-outline-success" />
</EditForm>

<div class="text-center alert-warning">
    @message
</div>


@code {
    InputOutputEntity inOut = new InputOutputEntity();
    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    List<WherehouseEntity> wherehouse = new List<WherehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();
    string buttonValue => inOut.IsInput ? "Registrar entrada" : "Registrar salida";
    string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        wherehouse = B_Wherehouse.ListWherehouse();

    }

    private void OnChangedWarehouse(ChangeEventArgs e)
    {
        var idwarehouse = e.Value.ToString();
        storages = B_Storage.StorageProductsByWarehouse(idwarehouse);

    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(x => x.StorageId.Equals(inOut.StorageId));
        oProduct = oStorage.Product;

        if (inOut.IsInput)
        {
            oStorage.PartialQuantity += inOut.Quantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.TotalQuantity += inOut.Quantity;
            B_Product.UpdateProduct(oProduct);

            message = $"El producto {oProduct.ProductName} ha sido actualizado.";
        }
        else
        {
            if (IsBiggerThanZero(inOut.Quantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity -= inOut.Quantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.TotalQuantity -= inOut.Quantity;
                B_Product.UpdateProduct(oProduct);
                message = $"El producto {oProduct.ProductName} ha sido actualizado.";
            }
            else
            {
                message = $"No existe la cantidad suficiente del producto {oProduct.ProductName}.";
            }
        }
    }

    private bool IsBiggerThanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity > quantity) return true;
        return false;
    }
}
