// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(InventoryContext))]
    partial class InventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Entidades.CategoryEntity", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "a2eaac30-f7a2-41fc-846d-ad42750aa21b",
                            CategoryName = "Aseo Hogar"
                        },
                        new
                        {
                            CategoryId = "ba92efc6-a6a1-4796-b62b-2563aff174f8",
                            CategoryName = "Aseo"
                        },
                        new
                        {
                            CategoryId = "69e53ac3-bded-4287-ba7d-ffefcd44e4ea",
                            CategoryName = "Hogar"
                        },
                        new
                        {
                            CategoryId = "e21f22b7-4e53-46c4-8970-e718542f2aad",
                            CategoryName = "Perfumeria"
                        },
                        new
                        {
                            CategoryId = "e13cbdaf-26b6-4a84-adbe-cd866044ab1f",
                            CategoryName = "Salud"
                        },
                        new
                        {
                            CategoryId = "f0041614-eebd-457d-8121-97d10ec2d41c",
                            CategoryName = "Videojuegos"
                        });
                });

            modelBuilder.Entity("Entidades.InputOutputEntity", b =>
                {
                    b.Property<string>("InOutId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InOutDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInput")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StorageId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InOutId");

                    b.HasIndex("StorageId");

                    b.ToTable("InputOutputs");
                });

            modelBuilder.Entity("Entidades.ProductEntity", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entidades.StorageEntity", b =>
                {
                    b.Property<string>("StorageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartialQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("WherehouseId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StorageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WherehouseId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Entidades.WherehouseEntity", b =>
                {
                    b.Property<string>("WherehouseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WherehouseAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WherehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WherehouseId");

                    b.ToTable("Wherehouses");

                    b.HasData(
                        new
                        {
                            WherehouseId = "9e7c2f15-f7df-4d85-96e6-9e147b5cb295",
                            WherehouseAddress = "Calle 123",
                            WherehouseName = "Bodega central"
                        },
                        new
                        {
                            WherehouseId = "d10e8482-8ba1-40c4-9c8a-13c31b9e5774",
                            WherehouseAddress = "Calle 562",
                            WherehouseName = "Bodega Sur"
                        },
                        new
                        {
                            WherehouseId = "78d542be-670f-433d-98cc-cf73d68f52ec",
                            WherehouseAddress = "Calle 987",
                            WherehouseName = "Bodega Norte"
                        });
                });

            modelBuilder.Entity("Entidades.InputOutputEntity", b =>
                {
                    b.HasOne("Entidades.StorageEntity", "Storage")
                        .WithMany("InputOutputs")
                        .HasForeignKey("StorageId");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Entidades.ProductEntity", b =>
                {
                    b.HasOne("Entidades.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entidades.StorageEntity", b =>
                {
                    b.HasOne("Entidades.ProductEntity", "Product")
                        .WithMany("Storages")
                        .HasForeignKey("ProductId");

                    b.HasOne("Entidades.WherehouseEntity", "Wherehouse")
                        .WithMany("Storages")
                        .HasForeignKey("WherehouseId");

                    b.Navigation("Product");

                    b.Navigation("Wherehouse");
                });

            modelBuilder.Entity("Entidades.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entidades.ProductEntity", b =>
                {
                    b.Navigation("Storages");
                });

            modelBuilder.Entity("Entidades.StorageEntity", b =>
                {
                    b.Navigation("InputOutputs");
                });

            modelBuilder.Entity("Entidades.WherehouseEntity", b =>
                {
                    b.Navigation("Storages");
                });
#pragma warning restore 612, 618
        }
    }
}
